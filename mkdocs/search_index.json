{
    "docs": [
        {
            "location": "/", 
            "text": "zend-xml2json\n\n\n\n\n\n\nzend-xml2json provides functionality for converting XML structures to JSON.\n\n\n\n\nFile issues at https://github.com/zendframework/zend-xml2json/issues\n\n\nDocumentation is at https://zendframework.github.io/zend-xml2json/", 
            "title": "Home"
        }, 
        {
            "location": "/#zend-xml2json", 
            "text": "zend-xml2json provides functionality for converting XML structures to JSON.   File issues at https://github.com/zendframework/zend-xml2json/issues  Documentation is at https://zendframework.github.io/zend-xml2json/", 
            "title": "zend-xml2json"
        }, 
        {
            "location": "/usage/", 
            "text": "XML to JSON conversion\n\n\nzend-xml2json provides a convenience method for transforming XML formatted data\ninto JSON format.  This feature was inspired from an \nIBM developerWorks\narticle\n.\n\n\nzend-xml2json provides the static method \nZend\\Xml2Json\\Xml2Json::fromXml()\n.\nThis method will generate JSON from a given XML input. This method takes any\narbitrary XML string as an input parameter, and optionally a boolean parameter\nto instruct the conversion logic as to whether or not to ignore XML attributes\nduring the conversion process. If the optional flag for converting attributes is\nnot provided, then the default behavior is to ignore the XML attributes.\n\n\nA basic example follows:\n\n\n$jsonContents = Zend\\Xml2Json\\Xml2Json::fromXml($xmlStringContents, true);\n\n\n\n\nZend\\Xml2Json\\Xml2Json::fromXml()\n converts the XML formatted string input\nparameter and returns the equivalent JSON formatted string output. In case of an\nXML input format error or conversion logic error, it raises an exception.\n\n\nThe conversion logic uses recursive techniques to traverse the XML tree,\nsupporting up to 25 levels deep. Beyond that depth, it raises a\n\nZend\\Xml2Json\\Exception\\RecursionException\n.\n\n\nExample\n\n\nThe following example demonstrates both the XML input string passed to and the JSON\noutput string returned from \nZend\\Xml2Json\\Xml2Json::fromXml()\n. This example\npasses a boolean false to the second argument in order to receive a\nrepresentation of the XML attributes in the returned JSON.\n\n\nFirst, let's look at the XML:\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nbooks\n\n    \nbook id=\n1\n\n        \ntitle\nCode Generation in Action\n/title\n\n        \nauthor\nfirst\nJack\n/first\nlast\nHerrington\n/last\n/author\n\n        \npublisher\nManning\n/publisher\n\n    \n/book\n\n\n    \nbook id=\n2\n\n        \ntitle\nPHP Hacks\n/title\n\n        \nauthor\nfirst\nJack\n/first\nlast\nHerrington\n/last\n/author\n\n        \npublisher\nO'Reilly\n/publisher\n\n    \n/book\n\n\n    \nbook id=\n3\n\n        \ntitle\nPodcasting Hacks\n/title\n\n        \nauthor\nfirst\nJack\n/first\nlast\nHerrington\n/last\n/author\n\n        \npublisher\nO'Reilly\n/publisher\n\n    \n/book\n\n\n/books\n\n\n\n\nAssuming that the above is captured in the variable \n$xml\n, we'll now pass it to\nthe following code:\n\n\n// Passing the second parameter to ensure we get attributes as well.\n$json = Zend\\Xml2Json\\Xml2Json::fromXml($xml, false);\n\n\n\n\nThis results in the following JSON:\n\n\n{\n   \nbooks\n : {\n      \nbook\n : [ {\n         \n@attributes\n : {\n            \nid\n : \n1\n\n         },\n         \ntitle\n : \nCode Generation in Action\n,\n         \nauthor\n : {\n            \nfirst\n : \nJack\n, \nlast\n : \nHerrington\n\n         },\n         \npublisher\n : \nManning\n\n      }, {\n         \n@attributes\n : {\n            \nid\n : \n2\n\n         },\n         \ntitle\n : \nPHP Hacks\n, \nauthor\n : {\n            \nfirst\n : \nJack\n, \nlast\n : \nHerrington\n\n         },\n         \npublisher\n : \nO'Reilly\n\n      }, {\n         \n@attributes\n : {\n            \nid\n : \n3\n\n         },\n         \ntitle\n : \nPodcasting Hacks\n, \nauthor\n : {\n            \nfirst\n : \nJack\n, \nlast\n : \nHerrington\n\n         },\n         \npublisher\n : \nO'Reilly\n\n      }\n   ]}\n}", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#xml-to-json-conversion", 
            "text": "zend-xml2json provides a convenience method for transforming XML formatted data\ninto JSON format.  This feature was inspired from an  IBM developerWorks\narticle .  zend-xml2json provides the static method  Zend\\Xml2Json\\Xml2Json::fromXml() .\nThis method will generate JSON from a given XML input. This method takes any\narbitrary XML string as an input parameter, and optionally a boolean parameter\nto instruct the conversion logic as to whether or not to ignore XML attributes\nduring the conversion process. If the optional flag for converting attributes is\nnot provided, then the default behavior is to ignore the XML attributes.  A basic example follows:  $jsonContents = Zend\\Xml2Json\\Xml2Json::fromXml($xmlStringContents, true);  Zend\\Xml2Json\\Xml2Json::fromXml()  converts the XML formatted string input\nparameter and returns the equivalent JSON formatted string output. In case of an\nXML input format error or conversion logic error, it raises an exception.  The conversion logic uses recursive techniques to traverse the XML tree,\nsupporting up to 25 levels deep. Beyond that depth, it raises a Zend\\Xml2Json\\Exception\\RecursionException .", 
            "title": "XML to JSON conversion"
        }, 
        {
            "location": "/usage/#example", 
            "text": "The following example demonstrates both the XML input string passed to and the JSON\noutput string returned from  Zend\\Xml2Json\\Xml2Json::fromXml() . This example\npasses a boolean false to the second argument in order to receive a\nrepresentation of the XML attributes in the returned JSON.  First, let's look at the XML:  ?xml version= 1.0  encoding= UTF-8 ?  books \n     book id= 1 \n         title Code Generation in Action /title \n         author first Jack /first last Herrington /last /author \n         publisher Manning /publisher \n     /book \n\n     book id= 2 \n         title PHP Hacks /title \n         author first Jack /first last Herrington /last /author \n         publisher O'Reilly /publisher \n     /book \n\n     book id= 3 \n         title Podcasting Hacks /title \n         author first Jack /first last Herrington /last /author \n         publisher O'Reilly /publisher \n     /book  /books  Assuming that the above is captured in the variable  $xml , we'll now pass it to\nthe following code:  // Passing the second parameter to ensure we get attributes as well.\n$json = Zend\\Xml2Json\\Xml2Json::fromXml($xml, false);  This results in the following JSON:  {\n    books  : {\n       book  : [ {\n          @attributes  : {\n             id  :  1 \n         },\n          title  :  Code Generation in Action ,\n          author  : {\n             first  :  Jack ,  last  :  Herrington \n         },\n          publisher  :  Manning \n      }, {\n          @attributes  : {\n             id  :  2 \n         },\n          title  :  PHP Hacks ,  author  : {\n             first  :  Jack ,  last  :  Herrington \n         },\n          publisher  :  O'Reilly \n      }, {\n          @attributes  : {\n             id  :  3 \n         },\n          title  :  Podcasting Hacks ,  author  : {\n             first  :  Jack ,  last  :  Herrington \n         },\n          publisher  :  O'Reilly \n      }\n   ]}\n}", 
            "title": "Example"
        }
    ]
}